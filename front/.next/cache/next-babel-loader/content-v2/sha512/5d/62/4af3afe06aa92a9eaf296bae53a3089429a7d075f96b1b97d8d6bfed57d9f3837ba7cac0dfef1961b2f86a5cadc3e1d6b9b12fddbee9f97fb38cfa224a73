{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '곰준'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE'\n    }, {\n      src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png'\n    }, {\n      src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'lion'\n      },\n      content: '댓글 입니다 ~'\n    }, {\n      User: {\n        nickname: 'haha'\n      },\n      content: '촉박해용 ~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst postReduce = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostComplete: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [action.data.dummyPost, ...state.mainPosts],\n        addPostLoading: false,\n        addPostComplete: true,\n        addPostError: null\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostComplete: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentComplete: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        // data: {\n        //   content: commentText,\n        //   postId: post.id,\n        //   userId: meId,\n        // }\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [{\n          User: {\n            nickname: '닉네임 ~'\n          },\n          content: action.data.content\n        }, ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post; // post.Comments = post.Comments.slice();\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentComplete: true,\n          addCommentError: null\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentComplete: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","postReduce","state","action","dummyPost","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: '곰준',\n      },\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\n      Images: [\n        {\n          src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE',\n        },\n        {\n          src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png',\n        },\n        {\n          src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png',\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: 'lion',\n          },\n          content: '댓글 입니다 ~',\n        },\n        {\n          User: {\n            nickname: 'haha',\n          },\n          content: '촉박해용 ~',\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n};\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst postReduce = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostComplete: false,\n        addPostError: null,\n      };\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        mainPosts: [action.data.dummyPost, ...state.mainPosts],\n        addPostLoading: false,\n        addPostComplete: true,\n        addPostError: null,\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostComplete: false,\n        addPostError: action.error,\n      };\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentComplete: false,\n        addCommentError: null,\n      };\n    case ADD_COMMENT_SUCCESS: {\n      // data: {\n      //   content: commentText,\n      //   postId: post.id,\n      //   userId: meId,\n      // }\n\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      const post = { ...state.mainPosts[postIndex] };\n      post.Comments = [\n        {\n          User: {\n            nickname: '닉네임 ~',\n          },\n          content: action.data.content,\n        },\n        ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      // post.Comments = post.Comments.slice();\n\n      return {\n        ...state,\n        mainPosts,\n        addCommentLoading: false,\n        addCommentComplete: true,\n        addCommentError: null,\n      };\n    }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentComplete: false,\n        addCommentError: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}