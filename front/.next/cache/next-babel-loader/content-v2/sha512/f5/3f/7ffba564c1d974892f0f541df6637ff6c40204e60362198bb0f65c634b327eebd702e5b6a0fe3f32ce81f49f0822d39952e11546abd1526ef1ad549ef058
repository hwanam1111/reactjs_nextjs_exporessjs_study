{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\nconst postReduce = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log(action.data);\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n      break;\n\n    case POST_LIKED_SUCCESS:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = true;\n      draft.postLikedError = null;\n      break;\n\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","postLikedLoading","postLikedComplete","postLikedError","removePostLoading","removePostComplete","removePostError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","removePostRequestAction","postReduce","state","action","draft","concat","length","error","unshift","console","log","post","find","v","id","PostId","Comments","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      console.log(action.data);\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n\n      break;\n    case POST_LIKED_SUCCESS:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = true;\n      draft.postLikedError = null;\n\n      break;\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}