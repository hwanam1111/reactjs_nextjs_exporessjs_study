{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post'; // (이전상태, 액션) => 다음상태\n// const rootReducer = combineReducers({\n//   // 서버사이드 렌더링을 위해 index 추가\n//   index: (state = {}, action) => {\n//     switch (action.type) {\n//       case HYDRATE:\n//         console.log('HYDRATE', action);\n//         return {\n//           ...state,\n//           ...action.payload,\n//         };\n//       default:\n//         return state;\n//     }\n//   },\n//   user,\n//   post,\n// });\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    default:\n      {\n        const combineReducer = combineReducers({\n          user,\n          post\n        });\n        return combineReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/index.js"],"names":["combineReducers","HYDRATE","user","post","rootReducer","state","action","type","combineReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE;AAAS;AACP,cAAMC,cAAc,GAAGR,eAAe,CAAC;AACrCE,UAAAA,IADqC;AAErCC,UAAAA;AAFqC,SAAD,CAAtC;AAKA,eAAOK,cAAc,CAACH,KAAD,EAAQC,MAAR,CAArB;AACD;AARH;AAUD,CAXD;;AAaA,eAAeF,WAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport { HYDRATE } from 'next-redux-wrapper';\n\nimport user from './user';\nimport post from './post';\n\n// (이전상태, 액션) => 다음상태\n// const rootReducer = combineReducers({\n//   // 서버사이드 렌더링을 위해 index 추가\n//   index: (state = {}, action) => {\n//     switch (action.type) {\n//       case HYDRATE:\n//         console.log('HYDRATE', action);\n//         return {\n//           ...state,\n//           ...action.payload,\n//         };\n//       default:\n//         return state;\n//     }\n//   },\n//   user,\n//   post,\n// });\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    default: {\n      const combineReducer = combineReducers({\n        user,\n        post,\n      });\n\n      return combineReducer(state, action);\n    }\n  }\n}\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}