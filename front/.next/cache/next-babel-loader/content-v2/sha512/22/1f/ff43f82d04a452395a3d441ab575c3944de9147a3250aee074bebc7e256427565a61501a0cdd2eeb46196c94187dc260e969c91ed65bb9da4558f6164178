{"ast":null,"code":"import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, POST_LIKED_REQUEST, POST_LIKED_SUCCESS, POST_LIKED_FAILURE, POST_UNLIKED_REQUEST, POST_UNLIKED_SUCCESS, POST_UNLIKED_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI() {\n  return axios.get('/posts/load_posts');\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction postLikedAPI(data) {\n  return axios.patch(`/post/${data.postId}/liked`);\n}\n\nfunction* postLiked(action) {\n  try {\n    const result = yield call(postLikedAPI, action.data);\n    yield put({\n      type: POST_LIKED_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: POST_LIKED_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction postUnLikedAPI(data) {\n  return axios.delete(`/post/${data.postId}/liked`);\n}\n\nfunction* postUnLiked(action) {\n  try {\n    const result = yield call(postUnLikedAPI, action.data);\n    yield put({\n      type: POST_UNLIKED_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: POST_UNLIKED_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/retweet/${data}`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchPostLike() {\n  yield takeLatest(POST_LIKED_REQUEST, postLiked);\n}\n\nfunction* watchPostUnLike() {\n  yield takeLatest(POST_UNLIKED_REQUEST, postUnLiked);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchPostLike), fork(watchPostUnLike), fork(watchUploadImages), fork(watchRetweet), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","axios","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","POST_UNLIKED_REQUEST","POST_UNLIKED_SUCCESS","POST_UNLIKED_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","get","loadPost","result","type","data","err","console","error","response","addPostAPI","post","addPost","action","id","addCommentAPI","postId","addComment","postLikedAPI","patch","postLiked","postUnLikedAPI","delete","postUnLiked","uploadImagesAPI","uploadImages","retweetAPI","retweet","removePostAPI","removePost","watchLoadPost","watchAddPost","watchAddComment","watchPostLike","watchPostUnLike","watchUploadImages","watchRetweet","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  POST_LIKED_REQUEST, POST_LIKED_SUCCESS, POST_LIKED_FAILURE,\n  POST_UNLIKED_REQUEST, POST_UNLIKED_SUCCESS, POST_UNLIKED_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n} from '../reducers/post';\n\nimport {\n  ADD_POST_TO_ME, REMOVE_POST_OF_ME,\n} from '../reducers/user';\n\nfunction loadPostAPI() {\n  return axios.get('/posts/load_posts');\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction postLikedAPI(data) {\n  return axios.patch(`/post/${data.postId}/liked`);\n}\n\nfunction* postLiked(action) {\n  try {\n    const result = yield call(postLikedAPI, action.data);\n    yield put({\n      type: POST_LIKED_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: POST_LIKED_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction postUnLikedAPI(data) {\n  return axios.delete(`/post/${data.postId}/liked`);\n}\n\nfunction* postUnLiked(action) {\n  try {\n    const result = yield call(postUnLikedAPI, action.data);\n    yield put({\n      type: POST_UNLIKED_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: POST_UNLIKED_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/retweet/${data}`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchPostLike() {\n  yield takeLatest(POST_LIKED_REQUEST, postLiked);\n}\n\nfunction* watchPostUnLike() {\n  yield takeLatest(POST_UNLIKED_REQUEST, postUnLiked);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchPostLike),\n    fork(watchPostUnLike),\n    fork(watchUploadImages),\n    fork(watchRetweet),\n    fork(watchRemovePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}