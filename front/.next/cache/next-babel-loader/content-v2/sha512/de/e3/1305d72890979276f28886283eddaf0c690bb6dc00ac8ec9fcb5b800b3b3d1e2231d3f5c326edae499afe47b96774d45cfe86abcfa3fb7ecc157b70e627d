{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_OUT');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/user.js"],"names":["login","watchLogin","watchLogout","userSaga","all","fork","takeLatest","delay","put","axios","loginAPI","data","post","action","type","result","response","watchLogIn","watchLogOut"],"mappings":";;oDAQUA,K;qDAiBAC,U;qDAIAC,W;qDAIeC,Q;;AAjCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,UAAX,EAAuBD,IAAvB,CAAP;AACD;;AAED,SAAUX,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMC,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,gBADE;AAERH,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMH,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE,gBADE;AAERH,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFX,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,gBAAD,EAAmBN,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAAC,SAAD,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUH,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACY,UAAD,CADI,EAERZ,IAAI,CAACa,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\n\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT');\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut)\n  ])\n}"]},"metadata":{},"sourceType":"module"}