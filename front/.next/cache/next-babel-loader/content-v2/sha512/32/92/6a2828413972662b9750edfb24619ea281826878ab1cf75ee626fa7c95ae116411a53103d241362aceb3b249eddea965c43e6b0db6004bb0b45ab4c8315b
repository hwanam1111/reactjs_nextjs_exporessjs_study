{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            // data: result.data\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'ADD_COMMENT_SUCCESS',\n            // data: result.data\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'ADD_COMMENT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('ADD_COMMENT_REQUEST', addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","all","fork","takeLatest","delay","put","action","type","data","response"],"mappings":";;oDAIUA,O;qDAkBAC,U;qDAkBAC,Y;qDAIAC,e;qDAIeC,Q;;AAhDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;;AAIA,SAAUT,OAAV,CAAkBU,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMF,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMC,GAAG,CAAC;AACRE,YAAAA,IAAI,EAAE,kBADE;AAER;AACAC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMH,GAAG,CAAC;AACRE,YAAAA,IAAI,EAAE,kBADE;AAERC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAFX,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUX,UAAV,CAAqBS,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMF,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMC,GAAG,CAAC;AACRE,YAAAA,IAAI,EAAE,qBADE;AAER;AACAC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMH,GAAG,CAAC;AACRE,YAAAA,IAAI,EAAE,qBADE;AAERC,YAAAA,IAAI,EAAE,aAAIC,QAAJ,CAAaD;AAFX,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,kBAAD,EAAqBP,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAAC,qBAAD,EAAwBN,UAAxB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACJ,YAAD,CADI,EAERI,IAAI,CAACH,eAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\n\n\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      // data: result.data\n      data: action.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'ADD_COMMENT_SUCCESS',\n      // data: result.data\n      data: action.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: 'ADD_COMMENT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest('ADD_COMMENT_REQUEST', addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}