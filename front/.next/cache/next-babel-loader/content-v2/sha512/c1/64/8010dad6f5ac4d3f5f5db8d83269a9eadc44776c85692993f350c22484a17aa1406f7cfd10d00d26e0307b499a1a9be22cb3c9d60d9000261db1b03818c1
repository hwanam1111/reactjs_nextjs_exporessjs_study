{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.post('/load_post', data);\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      // data: generateDummyPost(10),\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function removePostAPI() {\n//   axios.post('', );\n// }\n\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","post","loadPost","result","type","err","error","response","addPostAPI","addPost","action","id","addCommentAPI","postId","addComment","removePost","watchLoadPost","watchAddPost","watchAddComment","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n} from '../reducers/post';\n\nimport {\n  ADD_POST_TO_ME, REMOVE_POST_OF_ME,\n} from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.post('/load_post', data);\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      // data: generateDummyPost(10),\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function removePostAPI() {\n//   axios.post('', );\n// }\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}