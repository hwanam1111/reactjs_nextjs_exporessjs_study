{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  uploadImageLoading: false,\n  uploadImageSuccess: false,\n  uploadImageError: null,\n  retweetLoading: false,\n  retweetSuccess: false,\n  retweetError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\nexport const POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport const POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport const POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const postLikedRequestAction = data => ({\n  type: POST_LIKED_REQUEST,\n  data\n});\nexport const postUnLikedRequestAction = data => ({\n  type: POST_UNLIKED_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\nconst postReduce = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = draft.mainPosts.length === 10;\n      console.log(action.data);\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n      break;\n\n    case POST_LIKED_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.PostLikers.push({\n          id: action.data.UserId\n        });\n        draft.postLikedLoading = false;\n        draft.postLikedComplete = true;\n        draft.postLikedError = null;\n        break;\n      }\n\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n      break;\n\n    case POST_UNLIKED_REQUEST:\n      draft.postUnLikedLoading = true;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = null;\n      break;\n\n    case POST_UNLIKED_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.PostLikers = post.PostLikers.filter(v => v.id !== action.data.UserId);\n        draft.postUnLikedLoading = false;\n        draft.postUnLikedComplete = true;\n        draft.postUnLikedError = null;\n        break;\n      }\n\n    case POST_UNLIKED_FAILURE:\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImageLoading = true;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = true;\n      draft.uploadImageError = null;\n      draft.imagePaths = action.data;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = action.error;\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetSuccess = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetSuccess = true;\n      draft.retweetError = null;\n      draft.mainPosts.unshift(action.data);\n      console.log(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetSuccess = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","postLikedLoading","postLikedComplete","postLikedError","postUnLikedLoading","postUnLikedComplete","postUnLikedError","uploadImageLoading","uploadImageSuccess","uploadImageError","retweetLoading","retweetSuccess","retweetError","removePostLoading","removePostComplete","removePostError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","POST_UNLIKED_REQUEST","POST_UNLIKED_SUCCESS","POST_UNLIKED_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addCommentRequestAction","data","type","postLikedRequestAction","postUnLikedRequestAction","removePostRequestAction","postReduce","state","action","draft","concat","length","console","log","error","unshift","post","find","v","id","PostId","Comments","PostLikers","push","UserId","filter","i"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  uploadImageLoading: false,\n  uploadImageSuccess: false,\n  uploadImageError: null,\n  retweetLoading: false,\n  retweetSuccess: false,\n  retweetError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\n\nexport const POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport const POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport const POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const postLikedRequestAction = (data) => ({\n  type: POST_LIKED_REQUEST,\n  data,\n});\n\nexport const postUnLikedRequestAction = (data) => ({\n  type: POST_UNLIKED_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = draft.mainPosts.length === 10;\n\n      console.log(action.data);\n\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n      draft.imagePaths = [];\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n\n      break;\n    case POST_LIKED_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.PostLikers.push({ id: action.data.UserId });\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = true;\n      draft.postLikedError = null;\n\n      break;\n    }\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n\n      break;\n    case POST_UNLIKED_REQUEST:\n      draft.postUnLikedLoading = true;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = null;\n\n      break;\n    case POST_UNLIKED_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.PostLikers = post.PostLikers.filter((v) => v.id !== action.data.UserId);\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = true;\n      draft.postUnLikedError = null;\n\n      break;\n    }\n    case POST_UNLIKED_FAILURE:\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = action.error;\n\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImageLoading = true;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = null;\n\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = true;\n      draft.uploadImageError = null;\n      draft.imagePaths = action.data;\n\n      break;\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = action.error;\n\n      break;\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetSuccess = false;\n      draft.retweetError = null;\n\n      break;\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetSuccess = true;\n      draft.retweetError = null;\n      draft.mainPosts.unshift(action.data);\n\n      console.log(action.data);\n\n      break;\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetSuccess = false;\n      draft.retweetError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}