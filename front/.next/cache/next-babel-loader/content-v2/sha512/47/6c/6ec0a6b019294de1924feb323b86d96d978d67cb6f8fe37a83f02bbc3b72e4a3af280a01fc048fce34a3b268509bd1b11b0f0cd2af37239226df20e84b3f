{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '곰준'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE'\n    }, {\n      src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png'\n    }, {\n      src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'lion'\n      },\n      content: '댓글 입니다 ~'\n    }, {\n      User: {\n        nickname: 'haha'\n      },\n      content: '촉박해용 ~'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPostRequest = {\n  type: ADD_POST_REQUEST\n}; // const dummyPost = {\n//   id: 3,\n//   content: '더미 데이터 입니다.',\n//   User: {\n//     id: 1,\n//     nickname: '곰준'\n//   },\n//   Images: [],\n//   Comments: []\n// }\n\nexport const addCommentRequest = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n};\n\nconst postReduce = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread({}, state);\n\n    case ADD_POST_SUCCESS:\n      console.log(action);\n      return _objectSpread({}, state);\n\n    case ADD_POST_FAILURE:\n      return _objectSpread({}, state);\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread({}, state);\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread({}, state);\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequest","type","addCommentRequest","data","postReduce","state","action","console","log"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,uBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EAAE;AADP,KADM,EAIN;AACEA,MAAAA,GAAG,EAAE;AADP,KAJM,EAON;AACEA,MAAAA,GAAG,EAAE;AADP,KAPM,CAPV;AAkBEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,EAOR;AACEF,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAPQ;AAlBZ,GADS,CADe;AAoC1BI,EAAAA,UAAU,EAAE,EApCc;AAqC1BC,EAAAA,SAAS,EAAE;AArCe,CAArB;AAwCP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAGP,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EAAEP;AADsB,CAAvB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMQ,iBAAiB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAEJ,mBADD;AAELM,IAAAA;AAFK,GAAP;AAID,CALM;;AAOP,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGtB,YAAT,EAAuBuB,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKP,gBAAL;AACE,+BACKW,KADL;;AAGF,SAAKV,gBAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,+BACKD,KADL;;AAKF,SAAKT,gBAAL;AACE,+BACKS,KADL;;AAGF,SAAKR,mBAAL;AACE,+BACKQ,KADL;;AAGF,SAAKP,mBAAL;AACI,+BACKO,KADL;;AAGJ,SAAKN,mBAAL;AACE,+BACKM,KADL;;AAGF;AACE,aAAOA,KAAP;AA7BJ;AA+BD,CAhCD;;AAkCA,eAAeD,UAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: '곰준'\n      },\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\n      Images: [\n        {\n          src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE'\n        },\n        {\n          src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png'\n        },\n        {\n          src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png'\n        }\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: 'lion'\n          },\n          content: '댓글 입니다 ~'\n        },\n        {\n          User: {\n            nickname: 'haha'\n          },\n          content: '촉박해용 ~'\n        }\n      ]\n    },\n  ],\n  imagePaths: [],\n  postAdded: false\n}\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\nexport const addPostRequest = {\n  type: ADD_POST_REQUEST\n}\n\n// const dummyPost = {\n//   id: 3,\n//   content: '더미 데이터 입니다.',\n//   User: {\n//     id: 1,\n//     nickname: '곰준'\n//   },\n//   Images: [],\n//   Comments: []\n// }\n\nexport const addCommentRequest = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  }\n}\n\nconst postReduce = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state\n      }\n    case ADD_POST_SUCCESS:\n      console.log(action)\n      return {\n        ...state,\n        // mainPosts: [action., ...state.mainPosts],\n        // postAdded: true\n      }\n    case ADD_POST_FAILURE:\n      return {\n        ...state\n      }\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state\n      }\n    case ADD_COMMENT_SUCCESS:\n        return {\n          ...state\n        }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state\n      }\n    default: \n      return state;\n  }\n};\n\nexport default postReduce;"]},"metadata":{},"sourceType":"module"}