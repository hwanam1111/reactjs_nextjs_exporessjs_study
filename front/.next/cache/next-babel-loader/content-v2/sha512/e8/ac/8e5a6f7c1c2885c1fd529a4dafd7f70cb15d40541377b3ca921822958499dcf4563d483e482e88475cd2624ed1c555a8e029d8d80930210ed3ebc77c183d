{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, delay, put, throttle } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { generateDummyPost, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // function loadPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction loadPost() {\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          // const id = shortId.generate();\n          id = Math.random() * 10000000 + 0;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n} // function addCommentAPI(data) {\n//   return axios.post('/api/post/${data.postId}/comment', data);\n// }\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            // data: result.data\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} // function removePostAPI() {\n//   axios.post('', );\n// }\n\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return throttle(LOAD_POST_REQUEST, loadPost, 2000);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["loadPost","addPost","addComment","removePost","watchLoadPost","watchAddPost","watchAddComment","watchRemovePost","postSaga","all","fork","takeLatest","delay","put","throttle","generateDummyPost","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","type","data","error","response","action","id","Math","random","content"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, throttle } from 'redux-saga/effects';\n// import axios from 'axios';\n\nimport {\n  generateDummyPost,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n} from '../reducers/post';\n\nimport {\n  ADD_POST_TO_ME, REMOVE_POST_OF_ME,\n} from '../reducers/user';\n\n// function loadPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction* loadPost() {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    // const id = shortId.generate();\n    const id = Math.random() * 10000000 + 0;\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addCommentAPI(data) {\n//   return axios.post('/api/post/${data.postId}/comment', data);\n// }\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: result.data\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function removePostAPI() {\n//   axios.post('', );\n// }\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield throttle(LOAD_POST_REQUEST, loadPost, 2000);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}