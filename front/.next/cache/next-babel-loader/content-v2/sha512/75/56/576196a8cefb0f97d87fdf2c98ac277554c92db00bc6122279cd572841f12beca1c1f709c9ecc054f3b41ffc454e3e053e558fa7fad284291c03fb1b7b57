{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/components/PostCard.js\";\nimport React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { POST_LIKED_REQUEST, POST_UNLIKED_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\nconst CardItemListWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"PostCard__CardItemListWrapper\",\n  componentId: \"d6cf4y-0\"\n})([\"margin-bottom:10px;&:last-child{marign-bottom:0;}\"]);\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const meId = me === null || me === void 0 ? void 0 : me.id; // optional chaining 연산자\n\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const onClickLike = useCallback(() => {\n    if (me && meId) {\n      dispatch({\n        type: POST_LIKED_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    } else {\n      alert('로그인 후 좋아요가 가능합니다.');\n    }\n  }, []);\n  const onClickUnLike = useCallback(() => {\n    if (me && meId) {\n      dispatch({\n        type: POST_UNLIKED_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    } else {\n      alert('로그인 후 좋아요가 가능합니다.');\n    }\n  }, []);\n  const onClickDeleteBtn = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpend\n  } = useState(false);\n  const onToggleCommentOpen = useCallback(() => {\n    setCommentFormOpend(prevData => !prevData);\n  }, []);\n  post.PostLikers.find(v => {\n    console.log(v.id);\n    console.log(v.id === meId);\n  });\n  const liked = post.PostLikers.find(v => v.id === meId); // console.log(liked);\n\n  return /*#__PURE__*/_jsxDEV(CardItemListWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images.length !== 0 && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 44\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onClickUnLike\n      }, \"header\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onClickLike\n      }, \"header\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 98\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleCommentOpen\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: meId && meId === post.User.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              htmlType: \"button\",\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              htmlType: \"button\",\n              loading: removePostLoading,\n              onClick: onClickDeleteBtn,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              htmlType: \"button\",\n              children: \"\\uC2E0\\uACE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)],\n      extra: meId && meId !== post.User.id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 46\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), commentFormOpend && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), post.Comments !== undefined && /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 31\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}; // 최대한 자세하게\n\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    PostLikers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","useDispatch","useSelector","PropTypes","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","styled","POST_LIKED_REQUEST","POST_UNLIKED_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardContent","CommentForm","FollowButton","CardItemListWrapper","div","PostCard","post","dispatch","me","state","user","meId","id","removePostLoading","onClickLike","type","data","postId","alert","onClickUnLike","onClickDeleteBtn","commentFormOpend","setCommentFormOpend","onToggleCommentOpen","prevData","PostLikers","find","v","console","log","liked","Images","length","User","nickname","content","Comments","undefined","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport styled from 'styled-components';\n\nimport { POST_LIKED_REQUEST, POST_UNLIKED_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\n\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\n\nconst CardItemListWrapper = styled.div`\n  margin-bottom: 10px;\n  &:last-child {\n    marign-bottom: 0;\n  }\n`;\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n\n  const { me } = useSelector((state) => state.user);\n  const meId = me?.id; // optional chaining 연산자\n  const { removePostLoading } = useSelector((state) => state.post);\n\n  const onClickLike = useCallback(() => {\n    if (me && meId) {\n      dispatch({\n        type: POST_LIKED_REQUEST,\n        data: {\n          postId: post.id,\n        },\n      });\n    } else {\n      alert('로그인 후 좋아요가 가능합니다.');\n    }\n  }, []);\n\n  const onClickUnLike = useCallback(() => {\n    if (me && meId) {\n      dispatch({\n        type: POST_UNLIKED_REQUEST,\n        data: {\n          postId: post.id,\n        },\n      });\n    } else {\n      alert('로그인 후 좋아요가 가능합니다.');\n    }\n  }, []);\n\n  const onClickDeleteBtn = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const [commentFormOpend, setCommentFormOpend] = useState(false);\n  const onToggleCommentOpen = useCallback(() => {\n    setCommentFormOpend((prevData) => !prevData);\n  }, []);\n\n  post.PostLikers.find((v) => {\n    console.log(v.id);\n    console.log(v.id === meId);\n  });\n\n  const liked = post.PostLikers.find((v) => v.id === meId);\n  // console.log(liked);\n\n  return (\n    <CardItemListWrapper>\n      <Card\n        cover={post.Images.length !== 0 && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          liked ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"header\" onClick={onClickUnLike} /> : <HeartOutlined key=\"header\" onClick={onClickLike} />,\n          <MessageOutlined key=\"comment\" onClick={onToggleCommentOpen} />,\n          <Popover\n            key=\"more\"\n            content={(\n              <Button.Group>\n                {\n                  meId && meId === post.User.id\n                    ? (\n                      <>\n                        <Button htmlType=\"button\">수정</Button>\n                        <Button htmlType=\"button\" loading={removePostLoading} onClick={onClickDeleteBtn}>삭제</Button>\n                      </>\n                    )\n                    : (\n                      <>\n                        <Button htmlType=\"button\">신고</Button>\n                      </>\n                    )\n                }\n              </Button.Group>\n            )}\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={\n          (meId && meId !== post.User.id) && <FollowButton post={post} />\n        }\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n        />\n      </Card>\n      {\n        commentFormOpend && (\n          <>\n            <CommentForm post={post} />\n            { post.Comments !== undefined && (\n              <List\n                header={`${post.Comments.length}개의 댓글`}\n                itemLayout=\"horizontal\"\n                dataSource={post.Comments}\n                renderItem={(item) => (\n                  <li>\n                    <Comment\n                      author={item.User.nickname}\n                      avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                      content={item.content}\n                    />\n                  </li>\n                )}\n              />\n            )}\n          </>\n        )\n      }\n    </CardItemListWrapper>\n  );\n};\n\n// 최대한 자세하게\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    PostLikers: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}