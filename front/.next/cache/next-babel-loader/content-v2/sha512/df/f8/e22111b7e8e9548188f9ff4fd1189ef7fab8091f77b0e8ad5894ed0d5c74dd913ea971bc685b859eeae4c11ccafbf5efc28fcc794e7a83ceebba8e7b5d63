{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  uploadImageLoading: false,\n  uploadImageSuccess: false,\n  uploadImageError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\nexport const POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport const POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport const POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const postLikedRequestAction = data => ({\n  type: POST_LIKED_REQUEST,\n  data\n});\nexport const postUnLikedRequestAction = data => ({\n  type: POST_UNLIKED_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\nconst postReduce = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n      break;\n\n    case POST_LIKED_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.PostLikers.push({\n          id: action.data.UserId\n        });\n        draft.postLikedLoading = false;\n        draft.postLikedComplete = true;\n        draft.postLikedError = null;\n        break;\n      }\n\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n      break;\n\n    case POST_UNLIKED_REQUEST:\n      draft.postUnLikedLoading = true;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = null;\n      break;\n\n    case POST_UNLIKED_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.PostLikers = post.PostLikers.filter(v => v.id !== action.data.UserId);\n        draft.postUnLikedLoading = false;\n        draft.postUnLikedComplete = true;\n        draft.postUnLikedError = null;\n        break;\n      }\n\n    case POST_UNLIKED_FAILURE:\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImageLoading = true;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = true;\n      draft.uploadImageError = null;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","postLikedLoading","postLikedComplete","postLikedError","postUnLikedLoading","postUnLikedComplete","postUnLikedError","uploadImageLoading","uploadImageSuccess","uploadImageError","removePostLoading","removePostComplete","removePostError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","POST_UNLIKED_REQUEST","POST_UNLIKED_SUCCESS","POST_UNLIKED_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","postLikedRequestAction","postUnLikedRequestAction","removePostRequestAction","postReduce","state","action","draft","concat","length","error","unshift","post","find","v","id","PostId","Comments","PostLikers","push","UserId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  uploadImageLoading: false,\n  uploadImageSuccess: false,\n  uploadImageError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\n\nexport const POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport const POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport const POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const postLikedRequestAction = (data) => ({\n  type: POST_LIKED_REQUEST,\n  data,\n});\n\nexport const postUnLikedRequestAction = (data) => ({\n  type: POST_UNLIKED_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n\n      break;\n    case POST_LIKED_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.PostLikers.push({ id: action.data.UserId });\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = true;\n      draft.postLikedError = null;\n\n      break;\n    }\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n\n      break;\n    case POST_UNLIKED_REQUEST:\n      draft.postUnLikedLoading = true;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = null;\n\n      break;\n    case POST_UNLIKED_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.PostLikers = post.PostLikers.filter((v) => v.id !== action.data.UserId);\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = true;\n      draft.postUnLikedError = null;\n\n      break;\n    }\n    case POST_UNLIKED_FAILURE:\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = action.error;\n\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImageLoading = true;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = null;\n\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = true;\n      draft.uploadImageError = null;\n\n      break;\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImageLoading = false;\n      draft.uploadImageSuccess = false;\n      draft.uploadImageError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}