{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // function loginAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function logoutAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(logoutAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function signupAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signupAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logIn","action","type","data","err","error","response","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD,C,CACA;;AAEA,SACEC,cADF,EACkBC,cADlB,EACkCC,cADlC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,EAGEC,eAHF,EAGmBC,eAHnB,EAGoCC,eAHpC,QAIO,kBAJP,C,CAMA;AACA;AACA;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,cADE;AAER;AACAW,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,KAAD,CAAT;AAKD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAET,cADE;AAERY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUI,MAAV,CAAiBN,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEP,eADE;AAER;AACAQ,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,KAAD,CAAT;AAKD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEN,eADE;AAERS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUK,MAAV,CAAiBP,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEJ,eADE;AAER;AACAK,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,KAAD,CAAT;AAKD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEH,eADE;AAERM,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,UAAV,GAAuB;AACrB,QAAMrB,UAAU,CAACG,cAAD,EAAiBS,KAAjB,CAAhB;AACD;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMtB,UAAU,CAACM,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,UAAUI,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACS,eAAD,EAAkBW,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM1B,GAAG,CAAC,CACRC,IAAI,CAACsB,UAAD,CADI,EAERtB,IAAI,CAACuB,WAAD,CAFI,EAGRvB,IAAI,CAACwB,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\n// import axios from 'axios';\n\nimport {\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\n// function loginAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      // data: result.data\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function logoutAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(logoutAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function signupAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signupAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}