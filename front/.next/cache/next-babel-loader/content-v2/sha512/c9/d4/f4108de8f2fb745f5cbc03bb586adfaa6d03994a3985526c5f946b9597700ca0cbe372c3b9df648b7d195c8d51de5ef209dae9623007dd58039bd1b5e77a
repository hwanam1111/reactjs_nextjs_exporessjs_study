{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { generateDummyPost, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // function loadPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction* loadPost() {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id: result.data.id,\n        content: result.data.content\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function addCommentAPI(data) {\n//   return axios.post('/api/post/${data.postId}/comment', data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function removePostAPI() {\n//   axios.post('', );\n// }\n\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","generateDummyPost","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPost","type","data","err","error","response","addPostAPI","axios","post","addPost","action","result","call","id","content","addComment","removePost","watchLoadPost","watchAddPost","watchAddComment","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\n// import axios from 'axios';\n\nimport {\n  generateDummyPost,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n} from '../reducers/post';\n\nimport {\n  ADD_POST_TO_ME, REMOVE_POST_OF_ME,\n} from '../reducers/user';\n\n// function loadPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction* loadPost() {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id: result.data.id,\n        content: result.data.content,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addCommentAPI(data) {\n//   return axios.post('/api/post/${data.postId}/comment', data);\n// }\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: result.data\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function removePostAPI() {\n//   axios.post('', );\n// }\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}