{"ast":null,"code":"import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMoreHPost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n};\nexport const dummyPost = number => Array(20).fill().map(() => ({\n  id: Math.random() * 10000000 + 0,\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\n\nconst dummyPostData = data => ({\n  id: data.id,\n  content: data.content.content,\n  User: {\n    id: 1,\n    nickname: data.content.nickname\n  },\n  Images: [],\n  Comments: []\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\n\nconst postReduce = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPostData(action.data));\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift({\n          User: {\n            nickname: 'Immer 닉네임'\n          },\n          content: action.data.content\n        });\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","imagePaths","hasMoreHPost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","removePostLoading","removePostComplete","removePostError","dummyPost","number","Array","fill","map","id","Math","random","User","generate","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","removePostRequestAction","dummyPostData","postReduce","state","action","draft","concat","error","unshift","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMoreHPost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\nexport const dummyPost = (number) => Array(20).fill().map(() => ({\n  id: Math.random() * 10000000 + 0,\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName(),\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\nconst dummyPostData = (data) => ({\n  id: data.id,\n  content: data.content.content,\n  User: {\n    id: 1,\n    nickname: data.content.nickname,\n  },\n  Images: [],\n  Comments: [],\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPostData(action.data));\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n      post.Comments.unshift(\n        {\n          User: {\n            nickname: 'Immer 닉네임',\n          },\n          content: action.data.content,\n        },\n      );\n\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}