{"ast":null,"code":"import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: Math.random() * 10000000 + 0,\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nexport var removePostRequestAction = function removePostRequestAction(data) {\n  return {\n    type: REMOVE_POST_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPostData = function dummyPostData(data) {\n  return {\n    id: data.id,\n    content: data.content.content,\n    User: {\n      id: 1,\n      nickname: data.content.nickname\n    },\n    Images: [],\n    Comments: []\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\n\nvar postReduce = function postReduce() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostComplete = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostComplete = true;\n        draft.loadPostError = null;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        console.log(draft.mainPosts.length < 50);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostComplete = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostComplete = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n        draft.mainPosts.unshift(dummyPostData(action.data));\n        draft.addPostLoading = false;\n        draft.addPostComplete = true;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostComplete = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentComplete = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift({\n            User: {\n              nickname: 'Immer 닉네임'\n            },\n            content: action.data.content\n          });\n          draft.addCommentLoading = false;\n          draft.addCommentComplete = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostComplete = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostComplete = true;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostComplete = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","removePostLoading","removePostComplete","removePostError","generateDummyPost","number","Array","fill","map","id","Math","random","User","generate","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","removePostRequestAction","dummyPostData","postReduce","state","action","draft","concat","length","console","log","error","unshift","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n  id: Math.random() * 10000000 + 0,\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName(),\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\nconst dummyPostData = (data) => ({\n  id: data.id,\n  content: data.content.content,\n  User: {\n    id: 1,\n    nickname: data.content.nickname,\n  },\n  Images: [],\n  Comments: [],\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      console.log(draft.mainPosts.length < 50);\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPostData(action.data));\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n      post.Comments.unshift(\n        {\n          User: {\n            nickname: 'Immer 닉네임',\n          },\n          content: action.data.content,\n        },\n      );\n\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}