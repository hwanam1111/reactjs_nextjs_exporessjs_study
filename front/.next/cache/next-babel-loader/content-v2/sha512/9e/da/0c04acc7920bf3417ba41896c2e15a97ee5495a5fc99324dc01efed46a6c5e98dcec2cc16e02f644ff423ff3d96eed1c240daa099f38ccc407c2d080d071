{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\"; // import axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // function loginAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logIn","action","type","data","err","error","response","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD,C,CACA;;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,EAA4GC,eAA5G,EAA6HC,eAA7H,EAA8IC,eAA9I,QAAqK,kBAArK,C,CAGA;AACA;AACA;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,cADE;AAER;AACAW,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,KAAD,CAAT;AAKD,GARD,CASA,OAAMC,GAAN,EAAW;AACT,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAET,cADE;AAERY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUI,MAAV,CAAiBN,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEP,eADE;AAER;AACAQ,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAHL,KAAD,CAAT;AAKD,GARD,CASA,OAAMC,GAAN,EAAW;AACT,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEN,eADE;AAERS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAID,UAAUK,UAAV,GAAuB;AACrB,QAAMpB,UAAU,CAACG,cAAD,EAAiBS,KAAjB,CAAhB;AACD;;AAED,UAAUS,WAAV,GAAwB;AACtB,QAAMrB,UAAU,CAACM,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CACRC,IAAI,CAACqB,UAAD,CADI,EAERrB,IAAI,CAACsB,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\n// import axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'\n\n\n// function loginAPI(data) {\n//   return axios.post('/api/~~~', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      data: action.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut)\n  ])\n}"]},"metadata":{},"sourceType":"module"}