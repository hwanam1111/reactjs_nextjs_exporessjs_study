{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT');\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","axios","loginAPI","data","post","login","action","type","result","err","response","watchLogin","watchLogout","userSaga","watchLogIn","watchLogOut"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,UAAX,EAAuBD,IAAvB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAQA,OAAMM,GAAN,EAAW;AACT,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB,QAAMb,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB;AACD;;AAED,UAAUO,WAAV,GAAwB;AACtB,QAAMd,UAAU,CAAC,SAAD,CAAhB;AACD;;AAED,eAAe,UAAUe,QAAV,GAAqB;AAClC,QAAMjB,GAAG,CAAC,CACRC,IAAI,CAACiB,UAAD,CADI,EAERjB,IAAI,CAACkB,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\n\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT');\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut)\n  ])\n}"]},"metadata":{},"sourceType":"module"}