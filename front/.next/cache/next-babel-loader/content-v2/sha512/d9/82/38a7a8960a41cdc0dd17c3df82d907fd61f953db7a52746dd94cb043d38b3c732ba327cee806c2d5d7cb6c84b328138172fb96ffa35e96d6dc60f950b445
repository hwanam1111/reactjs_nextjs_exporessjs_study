{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport var POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport var POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\nexport var POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport var POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport var POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nexport var postLikedRequestAction = function postLikedRequestAction(data) {\n  return {\n    type: POST_LIKED_REQUEST,\n    data: data\n  };\n};\nexport var postUnLikedRequestAction = function postUnLikedRequestAction(data) {\n  return {\n    type: POST_UNLIKED_REQUEST,\n    data: data\n  };\n};\nexport var removePostRequestAction = function removePostRequestAction(data) {\n  return {\n    type: REMOVE_POST_REQUEST,\n    data: data\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\nvar postReduce = function postReduce() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostComplete = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostComplete = true;\n        draft.loadPostError = null;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostComplete = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostComplete = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostComplete = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift(action.data.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostComplete = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentComplete = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          console.log(action.data);\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentComplete = true;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case POST_LIKED_REQUEST:\n        draft.postLikedLoading = true;\n        draft.postLikedComplete = false;\n        draft.postLikedError = null;\n        break;\n\n      case POST_LIKED_SUCCESS:\n        {\n          console.log(action.data);\n\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.PostLikers.push({\n            id: action.data.UserId\n          });\n\n          draft.postLikedLoading = false;\n          draft.postLikedComplete = true;\n          draft.postLikedError = null;\n          break;\n        }\n\n      case POST_LIKED_FAILURE:\n        draft.postLikedLoading = false;\n        draft.postLikedComplete = false;\n        draft.postLikedError = action.error;\n        break;\n\n      case POST_UNLIKED_REQUEST:\n        draft.postUnLikedLoading = true;\n        draft.postUnLikedComplete = false;\n        draft.postUnLikedError = null;\n        break;\n\n      case POST_UNLIKED_SUCCESS:\n        {\n          console.log(action.data);\n\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id !== action.data.PostId;\n          });\n\n          _post2.PostLikers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n\n          draft.postUnLikedLoading = false;\n          draft.postUnLikedComplete = true;\n          draft.postUnLikedError = null;\n          break;\n        }\n\n      case POST_UNLIKED_FAILURE:\n        draft.postUnLikedLoading = false;\n        draft.postUnLikedComplete = false;\n        draft.postUnLikedError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostComplete = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostComplete = true;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostComplete = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostComplete","loadPostError","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","postLikedLoading","postLikedComplete","postLikedError","postUnLikedLoading","postUnLikedComplete","postUnLikedError","removePostLoading","removePostComplete","removePostError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","POST_UNLIKED_REQUEST","POST_UNLIKED_SUCCESS","POST_UNLIKED_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","postLikedRequestAction","postUnLikedRequestAction","removePostRequestAction","postReduce","state","action","draft","concat","length","error","unshift","console","log","post","find","v","id","PostId","Comments","PostLikers","push","UserId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostComplete: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  postLikedLoading: false,\n  postLikedComplete: false,\n  postLikedError: null,\n  postUnLikedLoading: false,\n  postUnLikedComplete: false,\n  postUnLikedError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: Math.random() * 10000000 + 0,\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const POST_LIKED_REQUEST = 'POST_LIKED_REQUEST';\nexport const POST_LIKED_SUCCESS = 'POST_LIKED_SUCCESS';\nexport const POST_LIKED_FAILURE = 'POST_LIKED_FAILURE';\n\nexport const POST_UNLIKED_REQUEST = 'POST_UNLIKED_REQUEST';\nexport const POST_UNLIKED_SUCCESS = 'POST_UNLIKED_SUCCESS';\nexport const POST_UNLIKED_FAILURE = 'POST_UNLIKED_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const postLikedRequestAction = (data) => ({\n  type: POST_LIKED_REQUEST,\n  data,\n});\n\nexport const postUnLikedRequestAction = (data) => ({\n  type: POST_UNLIKED_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostComplete = false;\n      draft.loadPostError = null;\n\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = true;\n      draft.loadPostError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostComplete = false;\n      draft.loadPostError = action.error;\n\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data.data);\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      console.log(action.data);\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case POST_LIKED_REQUEST:\n      draft.postLikedLoading = true;\n      draft.postLikedComplete = false;\n      draft.postLikedError = null;\n\n      break;\n    case POST_LIKED_SUCCESS: {\n      console.log(action.data);\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.PostLikers.push({ id: action.data.UserId });\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = true;\n      draft.postLikedError = null;\n\n      break;\n    }\n    case POST_LIKED_FAILURE:\n      draft.postLikedLoading = false;\n      draft.postLikedComplete = false;\n      draft.postLikedError = action.error;\n\n      break;\n    case POST_UNLIKED_REQUEST:\n      draft.postUnLikedLoading = true;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = null;\n\n      break;\n    case POST_UNLIKED_SUCCESS: {\n      console.log(action.data);\n      const post = draft.mainPosts.find((v) => v.id !== action.data.PostId);\n      post.PostLikers.filter((v) => v.id !== action.data.UserId);\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = true;\n      draft.postUnLikedError = null;\n\n      break;\n    }\n    case POST_UNLIKED_FAILURE:\n      draft.postUnLikedLoading = false;\n      draft.postUnLikedComplete = false;\n      draft.postUnLikedError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}