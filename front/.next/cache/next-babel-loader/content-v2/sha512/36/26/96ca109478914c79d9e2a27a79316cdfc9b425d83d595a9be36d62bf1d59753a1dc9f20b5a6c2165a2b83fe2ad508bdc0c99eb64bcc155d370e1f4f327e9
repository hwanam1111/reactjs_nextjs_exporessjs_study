{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, POST_LIKED_REQUEST, POST_LIKED_SUCCESS, POST_LIKED_FAILURE, POST_UNLIKED_REQUEST, POST_UNLIKED_SUCCESS, POST_UNLIKED_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI() {\n  return axios.get('/posts/load_posts');\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction postLikedAPI(data) {\n  return axios.post(`/post/${data.postId}/liked`, data);\n}\n\nfunction* postLiked(action) {\n  try {\n    const result = yield call(postLikedAPI, action.data);\n    yield put({\n      type: POST_LIKED_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: POST_LIKED_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction postUnLikedAPI(data) {\n  return axios.post(`/post/${data.postId}/un_liked`, data);\n}\n\nfunction* postUnLiked(action) {\n  try {\n    const result = yield call(postUnLikedAPI, action.data);\n    yield put({\n      type: POST_UNLIKED_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: POST_UNLIKED_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function removePostAPI() {\n//   axios.post('', );\n// }\n\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchPostLike() {\n  yield takeLatest(POST_LIKED_REQUEST, postLiked);\n}\n\nfunction* watchPostUnLike() {\n  yield takeLatest(POST_UNLIKED_REQUEST, postUnLiked);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchPostLike), fork(watchPostUnLike), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","POST_LIKED_REQUEST","POST_LIKED_SUCCESS","POST_LIKED_FAILURE","POST_UNLIKED_REQUEST","POST_UNLIKED_SUCCESS","POST_UNLIKED_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","get","loadPost","result","type","data","err","error","response","addPostAPI","post","addPost","action","id","console","addCommentAPI","postId","addComment","postLikedAPI","postLiked","postUnLikedAPI","postUnLiked","removePost","watchLoadPost","watchAddPost","watchAddComment","watchPostLike","watchPostUnLike","watchRemovePost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,iBADF,EACqBC,iBADrB,EACwCC,iBADxC,EAEEC,gBAFF,EAEoBC,gBAFpB,EAEsCC,gBAFtC,EAGEC,mBAHF,EAGuBC,mBAHvB,EAG4CC,mBAH5C,EAIEC,kBAJF,EAIsBC,kBAJtB,EAI0CC,kBAJ1C,EAKEC,oBALF,EAKwBC,oBALxB,EAK8CC,oBAL9C,EAMEC,mBANF,EAMuBC,mBANvB,EAM4CC,mBAN5C,QAOO,kBAPP;AASA,SACEC,cADF,EACkBC,iBADlB,QAEO,kBAFP;;AAIA,SAASC,WAAT,GAAuB;AACrB,SAAOrB,KAAK,CAACsB,GAAN,CAAU,mBAAV,CAAP;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMzB,IAAI,CAACsB,WAAD,CAAzB;AACA,UAAMvB,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEvB,iBADE;AAERwB,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEtB,iBADE;AAERyB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASI,UAAT,CAAoBJ,IAApB,EAA0B;AACxB,SAAO1B,KAAK,CAAC+B,IAAN,CAAW,gBAAX,EAA6BL,IAA7B,CAAP;AACD;;AAED,UAAUM,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMzB,IAAI,CAAC+B,UAAD,EAAaG,MAAM,CAACP,IAApB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEpB,gBADE;AAERqB,MAAAA,IAAI,EAAE;AACJA,QAAAA,IAAI,EAAEF,MAAM,CAACE;AADT;AAFE,KAAD,CAAT;AAMA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEN,cADE;AAERO,MAAAA,IAAI,EAAEF,MAAM,CAACE,IAAP,CAAYQ;AAFV,KAAD,CAAT;AAID,GAZD,CAYE,OAAOP,GAAP,EAAY;AACZQ,IAAAA,OAAO,CAACP,KAAR,CAAcD,GAAd;AACA,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEnB,gBADE;AAERsB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,aAAT,CAAuBV,IAAvB,EAA6B;AAC3B,SAAO1B,KAAK,CAAC+B,IAAN,CAAY,SAAQL,IAAI,CAACW,MAAO,UAAhC,EAA2CX,IAA3C,CAAP;AACD;;AAED,UAAUY,UAAV,CAAqBL,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMzB,IAAI,CAACqC,aAAD,EAAgBH,MAAM,CAACP,IAAvB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEjB,mBADE;AAERkB,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZQ,IAAAA,OAAO,CAACP,KAAR,CAAcD,GAAd;AACA,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEhB,mBADE;AAERmB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASa,YAAT,CAAsBb,IAAtB,EAA4B;AAC1B,SAAO1B,KAAK,CAAC+B,IAAN,CAAY,SAAQL,IAAI,CAACW,MAAO,QAAhC,EAAyCX,IAAzC,CAAP;AACD;;AAED,UAAUc,SAAV,CAAoBP,MAApB,EAA4B;AAC1B,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMzB,IAAI,CAACwC,YAAD,EAAeN,MAAM,CAACP,IAAtB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEd,kBADE;AAERe,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEb,kBADE;AAERgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASe,cAAT,CAAwBf,IAAxB,EAA8B;AAC5B,SAAO1B,KAAK,CAAC+B,IAAN,CAAY,SAAQL,IAAI,CAACW,MAAO,WAAhC,EAA4CX,IAA5C,CAAP;AACD;;AAED,UAAUgB,WAAV,CAAsBT,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMzB,IAAI,CAAC0C,cAAD,EAAiBR,MAAM,CAACP,IAAxB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEX,oBADE;AAERY,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEV,oBADE;AAERa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUiB,UAAV,CAAqBV,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMpC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAER,mBADE;AAERS,MAAAA,IAAI,EAAEO,MAAM,CAACP;AAFL,KAAD,CAAT;AAKA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEL,iBADE;AAERM,MAAAA,IAAI,EAAEO,MAAM,CAACP;AAFL,KAAD,CAAT;AAID,GAZD,CAYE,OAAOC,GAAP,EAAY;AACZ,UAAM7B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEP,mBADE;AAERU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUkB,aAAV,GAA0B;AACxB,QAAMhD,UAAU,CAACK,iBAAD,EAAoBsB,QAApB,CAAhB;AACD;;AAED,UAAUsB,YAAV,GAAyB;AACvB,QAAMjD,UAAU,CAACQ,gBAAD,EAAmB4B,OAAnB,CAAhB;AACD;;AAED,UAAUc,eAAV,GAA4B;AAC1B,QAAMlD,UAAU,CAACW,mBAAD,EAAsB+B,UAAtB,CAAhB;AACD;;AAED,UAAUS,aAAV,GAA0B;AACxB,QAAMnD,UAAU,CAACc,kBAAD,EAAqB8B,SAArB,CAAhB;AACD;;AAED,UAAUQ,eAAV,GAA4B;AAC1B,QAAMpD,UAAU,CAACiB,oBAAD,EAAuB6B,WAAvB,CAAhB;AACD;;AAED,UAAUO,eAAV,GAA4B;AAC1B,QAAMrD,UAAU,CAACoB,mBAAD,EAAsB2B,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAMxD,GAAG,CAAC,CACRC,IAAI,CAACiD,aAAD,CADI,EAERjD,IAAI,CAACkD,YAAD,CAFI,EAGRlD,IAAI,CAACmD,eAAD,CAHI,EAIRnD,IAAI,CAACoD,aAAD,CAJI,EAKRpD,IAAI,CAACqD,eAAD,CALI,EAMRrD,IAAI,CAACsD,eAAD,CANI,CAAD,CAAT;AAQD","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  POST_LIKED_REQUEST, POST_LIKED_SUCCESS, POST_LIKED_FAILURE,\n  POST_UNLIKED_REQUEST, POST_UNLIKED_SUCCESS, POST_UNLIKED_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n} from '../reducers/post';\n\nimport {\n  ADD_POST_TO_ME, REMOVE_POST_OF_ME,\n} from '../reducers/user';\n\nfunction loadPostAPI() {\n  return axios.get('/posts/load_posts');\n}\n\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post/add_post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        data: result.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction postLikedAPI(data) {\n  return axios.post(`/post/${data.postId}/liked`, data);\n}\n\nfunction* postLiked(action) {\n  try {\n    const result = yield call(postLikedAPI, action.data);\n    yield put({\n      type: POST_LIKED_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: POST_LIKED_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction postUnLikedAPI(data) {\n  return axios.post(`/post/${data.postId}/un_liked`, data);\n}\n\nfunction* postUnLiked(action) {\n  try {\n    const result = yield call(postUnLikedAPI, action.data);\n    yield put({\n      type: POST_UNLIKED_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: POST_UNLIKED_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function removePostAPI() {\n//   axios.post('', );\n// }\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchPostLike() {\n  yield takeLatest(POST_LIKED_REQUEST, postLiked);\n}\n\nfunction* watchPostUnLike() {\n  yield takeLatest(POST_UNLIKED_REQUEST, postUnLiked);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchPostLike),\n    fork(watchPostUnLike),\n    fork(watchRemovePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}