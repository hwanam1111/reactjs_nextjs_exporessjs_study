{"ast":null,"code":"import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '곰준'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE'\n    }, {\n      id: shortId.generate(),\n      src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png'\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'lion'\n      },\n      content: '댓글 입니다 ~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'haha'\n      },\n      content: '촉박해용 ~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: Math.random() * 10000000 + 0,\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\n\nconst dummyPostData = data => ({\n  id: data.id,\n  content: data.content.content,\n  User: {\n    id: 1,\n    nickname: data.content.nickname\n  },\n  Images: [],\n  Comments: []\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\n\n\nconst postReduce = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPostData(action.data));\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift({\n          User: {\n            nickname: 'Immer 닉네임'\n          },\n          content: action.data.content\n        });\n        draft.addCommentLoading = false;\n        draft.addCommentComplete = true;\n        draft.addCommentError = null;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default postReduce;","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostComplete","addPostError","addCommentLoading","addCommentComplete","addCommentError","removePostLoading","removePostComplete","removePostError","concat","Array","fill","map","Math","random","name","findName","lorem","paragraph","image","imageUrl","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","removePostRequestAction","dummyPostData","postReduce","state","action","draft","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: '곰준',\n      },\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\n      Images: [\n        {\n          id: shortId.generate(),\n          src: 'https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F24283C3858F778CA2EFABE',\n        },\n        {\n          id: shortId.generate(),\n          src: 'https://taegon.kim/wp-content/uploads/2018/05/image-5.png',\n        },\n        {\n          id: shortId.generate(),\n          src: 'https://www.urbanbrush.net/web/wp-content/uploads/edd/2018/12/urbanbrush-20181213142535248709.png',\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: 'lion',\n          },\n          content: '댓글 입니다 ~',\n        },\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: 'haha',\n          },\n          content: '촉박해용 ~',\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostComplete: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentComplete: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostComplete: false,\n  removePostError: null,\n};\n\ninitialState.mainPosts = initialState.mainPosts.concat(\n  Array(20).fill().map(() => ({\n    id: Math.random() * 10000000 + 0,\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.imageUrl(),\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.sentence(),\n    }],\n  })),\n);\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPostRequestAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addCommentRequestAction = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nexport const removePostRequestAction = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\nconst dummyPostData = (data) => ({\n  id: data.id,\n  content: data.content.content,\n  User: {\n    id: 1,\n    nickname: data.content.nickname,\n  },\n  Images: [],\n  Comments: [],\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수 (불변성 꼭 지켜야 함.)\nconst postReduce = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostComplete = false;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPostData(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPostData(action.data));\n      draft.addPostLoading = false;\n      draft.addPostComplete = true;\n      draft.addPostError = null;\n\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostComplete = false;\n      draft.addPostError = action.error;\n\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentComplete = false;\n      draft.addCommentError = null;\n\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n      post.Comments.unshift(\n        {\n          User: {\n            nickname: 'Immer 닉네임',\n          },\n          content: action.data.content,\n        },\n      );\n\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = true;\n      draft.addCommentError = null;\n\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentComplete = false;\n      draft.addCommentError = action.error;\n\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostComplete = false;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostComplete = true;\n      draft.removePostError = null;\n\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostComplete = false;\n      draft.removePostError = action.error;\n\n      break;\n    default:\n      break;\n  }\n});\n\nexport default postReduce;\n"]},"metadata":{},"sourceType":"module"}