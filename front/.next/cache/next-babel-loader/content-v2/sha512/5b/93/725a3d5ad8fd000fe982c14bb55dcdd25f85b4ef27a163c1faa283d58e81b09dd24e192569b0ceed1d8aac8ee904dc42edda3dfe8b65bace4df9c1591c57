{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeLatest } from 'redux-saga/effects'; // fork -> 비동기, call -> 동기\n\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_OUT');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('ADD_POST');\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/leejunkim/Desktop/development_study/fullstack-nodebird/prepare/front/sagas/index.js"],"names":["login","watchLogin","watchLogout","watchAddPost","rootSaga","all","call","fork","put","takeLatest","axios","loginAPI","data","post","action","result","type","response"],"mappings":";;oDAOUA,K;qDAgBAC,U;qDAIAC,W;qDAIAC,Y;qDAIeC,Q;;AAnCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD,C,CAAuE;;AACvE,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,UAAX,EAAuBD,IAAvB,CAAP;AACD;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMR,IAAI,CAACK,QAAD,EAAWG,MAAM,CAACF,IAAlB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAGI,iBAAMP,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE,gBADE;AAERJ,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMJ,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE,gBADE;AAERJ,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAAC,SAAD,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUN,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAAC,UAAD,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACL,WAAD,CAFE,EAGNK,IAAI,CAACJ,YAAD,CAHE,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, put, takeLatest } from 'redux-saga/effects'; // fork -> 비동기, call -> 동기\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/~~~', data);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  }\n  catch(err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT');\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST');\n}\n\nexport default function* rootSaga() {\n  yield all([\n      fork(watchLogin),\n      fork(watchLogout),\n      fork(watchAddPost)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}